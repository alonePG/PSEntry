document.addEventListener("DOMContentLoaded", () => {
  const tableBody = document.getElementById("pendingTableBody");
  const statusMsg = document.getElementById("statusMsg");
  const successSound = new Audio("assets/sound/success.mp3");

  // üß© ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
  const showMsg = (msg, type = "info") => {
    statusMsg.textContent = msg;
    statusMsg.className = `alert alert-${type}`;
    statusMsg.classList.remove("d-none");
  };

  // üöó ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏Å
  async function loadPendingCars() {
    try {
      const res = await fetch(`${SHEET_API_URL}?action=pendingDetails`);
      const data = await res.json();

      if (!Array.isArray(data) || data.length === 0) {
        tableBody.innerHTML = `<tr><td colspan="4">‚úÖ ‡∏£‡∏ñ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß</td></tr>`;
        return;
      }

      renderTable(data);
    } catch (err) {
      console.error("‚ùå Error loading pending cars:", err);
      tableBody.innerHTML = `<tr><td colspan="4">‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß</td></tr>`;
      showMsg("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: " + err.message, "danger");
    }
  }

  // üñ® ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
  function renderTable(data) {
    tableBody.innerHTML = "";
    data.forEach(({ plate, house, time }) => {
      const tr = document.createElement("tr");
      tr.innerHTML = `
        <td>${plate}</td>
        <td>${house}</td>
        <td>${time}</td>
        <td>
          <button class="btn btn-sm btn-success" onclick="checkout('${plate}')">üì§</button>
        </td>
      `;
      tableBody.appendChild(tr);
    });
  }

  loadPendingCars();

  // üü¢ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å
  window.checkout = async (plate) => {
    const confirmResult = await Swal.fire({
      title: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å?',
      text: `‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô: ${plate}`,
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: '‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô',
      cancelButtonText: '‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
    });

    if (!confirmResult.isConfirmed) return;

    try {
      const res = await fetch(SHEET_API_URL, {
        method: "POST",
        headers: { "Content-Type": "application/x-www-form-urlencoded" },
        body: new URLSearchParams({ action: "checkout", plate })
      });

      const result = await res.text();

      if (result.startsWith("‚úÖ")) {
        await Swal.fire({
          title: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
          text: result,
          icon: 'success',
          timer: 1500,
          showConfirmButton: false
        });
        successSound.play();
        loadPendingCars();
      } else {
        await Swal.fire({
          title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
          text: result,
          icon: 'error'
        });
      }

    } catch (err) {
      console.error("‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
      await Swal.fire({
        title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
        text: err.message,
        icon: 'error'
      });
    }
  };
});
